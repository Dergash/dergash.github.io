{"version":3,"sources":["api/apolloClient.ts","components/AppBar.tsx","components/HomePage.tsx","api/countries.ts","components/Table.tsx","components/CountryCard.tsx","components/CountriesList.tsx","components/CountryInfo.tsx","App.tsx","index.tsx"],"names":["client","ApolloClient","link","ApolloLink","from","onError","graphQLErrors","networkError","forEach","message","locations","path","console","error","HttpLink","uri","credentials","cache","InMemoryCache","Container","styled","nav","Title","h1","List","ul","Item","li","RouteButton","Link","React","memo","withRouter","props","to","div","fetchCountries","gql","fetchCountry","TableContainer","HtmlTable","table","TH","th","TRow","tr","columns","map","item","key","title","rows","items","index","column","length","placeholder","Card","Fields","Header","h2","Continent","span","country","code","name","native","continent","languages","PaginationContainer","PaginationControls","Button","button","disabled","Spinner","useQuery","loading","data","useState","page","setPage","countries","handlePrevPage","useCallback","handleNextPage","countriesPage","useMemo","slice","onClick","Field","HR","hr","countryCode","match","params","variables","currency","phone","AppLayout","AppContent","App","apolloClient","exact","component","HomePage","CountriesList","CountryInfo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d2a2a421.chunk.js","sourcesContent":["import ApolloClient from 'apollo-client';\r\nimport {ApolloLink} from 'apollo-link';\r\nimport {HttpLink} from 'apollo-link-http';\r\nimport {onError} from 'apollo-link-error';\r\nimport {InMemoryCache} from 'apollo-cache-inmemory';\r\n\r\nconst client = new ApolloClient({\r\n    link: ApolloLink.from([\r\n        onError(({ graphQLErrors, networkError }) => {\r\n            if (graphQLErrors)\r\n                graphQLErrors.forEach(({ message, locations, path }) =>\r\n                    console.error(\r\n                        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\r\n                    ),\r\n                );\r\n                if (networkError) {\r\n                    console.error(`[Network error]: ${networkError}`);\r\n                }\r\n          }),\r\n          new HttpLink({\r\n            uri: 'https://countries.trevorblades.com/graphql',\r\n            credentials: 'same-origin'\r\n          })\r\n    ]),\r\n    cache: new InMemoryCache()\r\n});\r\n\r\nexport default client;\r\n","import React, {FunctionComponent} from 'react';\r\nimport {withRouter} from 'react-router';\r\nimport {Link} from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\ninterface AppBarProps {\r\n\r\n}\r\n\r\nconst Container = styled.nav`\r\n    background-color: rgb(23, 43, 58);\r\n    height: 50px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n    z-index: 10;\r\n`\r\n\r\nconst Title = styled.h1`\r\n    margin: 0;\r\n    font-size: 18px;\r\n    font-weight: normal;\r\n    margin-right: 16px;\r\n\r\n    @media (max-width: 768px) {\r\n        display: none;\r\n    }\r\n`\r\n\r\nconst List = styled.ul`\r\n    height: 100%;\r\n    display: flex;\r\n    margin: 0;\r\n    padding-left: 0;\r\n    list-style: none;\r\n` \r\n\r\nconst Item = styled.li`\r\n    height: 100%;    \r\n`\r\n\r\nconst RouteButton = styled(Link)`\r\n    padding-left: 16px;\r\n    padding-right: 16px;\r\n    display: flex;\r\n    height: 100%;\r\n    align-items: center;\r\n    color: rgb(99, 169, 226);\r\n    text-transform: uppercase;\r\n    text-decoration: none;\r\n    justify-content: center;\r\n    line-height: 16px;\r\n    min-width: 70px;\r\n\r\n    &:hover {\r\n        background-color: rgb(28,48,63);\r\n    }\r\n`\r\n\r\nexport const AppBar: FunctionComponent<AppBarProps> = (props) => {\r\n    return <Container>\r\n        <List>\r\n            <Item>\r\n                <RouteButton to={`/`}>\r\n                    Index\r\n                </RouteButton>\r\n            </Item>\r\n            <Item>\r\n                <RouteButton to={`/countries`}>\r\n                    Countries List\r\n                </RouteButton>\r\n            </Item>\r\n        </List>\r\n        <Title>Countries Code Challenge</Title>\r\n    </Container>\r\n}\r\n\r\nexport default React.memo(withRouter(AppBar));\r\n","import React, {FunctionComponent} from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    height: 100%;\r\n    align-items: center;\r\n    font-size: 22px;\r\n`\r\n\r\nexport const HomePage: FunctionComponent = (props) => {\r\n    return <Container>\r\n        <span>Hej!</span>\r\n        <span>To select a route, please use the navigation bar.</span>\r\n    </Container>\r\n}\r\n\r\nexport default React.memo(HomePage);\r\n","import gql from 'graphql-tag';\r\n\r\nexport const fetchCountries = gql`\r\n{\r\n    countries {\r\n        name\r\n        native\r\n        currency\r\n        code\r\n        languages {\r\n            code\r\n            name\r\n            native\r\n        }\r\n        continent { name }\r\n    }\r\n}\r\n`\r\nexport const fetchCountry = gql`\r\n    query Country($countryCode: String!) {\r\n        country(code: $countryCode) {\r\n            name\r\n            code\r\n            currency\r\n            phone\r\n        }\r\n    }\r\n`\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst TableContainer = styled.div`\r\n    text-align: center;\r\n`;\r\n\r\nconst HtmlTable = styled.table`\r\n    width: 100%;\r\n`;\r\n\r\nconst TH = styled.th`\r\n    background-color: rgb(23, 43, 58);\r\n    height: 40px;\r\n`;\r\n\r\nconst TRow = styled.tr`\r\n    background-color: rgb(23, 43, 58, 0.4);\r\n    height: 40px;\r\n`;\r\n\r\nexport interface TableProps<DataItem> {\r\n    columns: Array<{ title?: string, key: keyof DataItem }>\r\n    items: DataItem[],\r\n    placeholder?: string\r\n}\r\n\r\nexport const Table = <DataItem, >(props: TableProps<DataItem>) => {\r\n    const columns = props.columns.map(item =>\r\n        <TH key={item.key as string}>\r\n            {item.title}\r\n        </TH>\r\n    )\r\n    const rows = props.items.map((item, index) =>\r\n        <TRow key={index}>\r\n            { props.columns.map(column =>\r\n                <td key={column.key as string}>\r\n                    {item[column.key]}\r\n                </td>\r\n            )}\r\n        </TRow>\r\n    )\r\n    return <TableContainer>\r\n        <HtmlTable>\r\n            <thead>\r\n                <tr>{columns}</tr>\r\n            </thead>\r\n            <tbody>\r\n                {rows}\r\n            </tbody>\r\n        </HtmlTable>\r\n        { !props.items.length && (props.placeholder || 'Empty') }\r\n    </TableContainer>\r\n}\r\n\r\n/**\r\n * Explicit type casting due to React.memo erasing generics info\r\n *\r\n * @see https://github.com/DefinitelyTyped/DefinitelyTyped/issues/37087\r\n */\r\nexport default React.memo(Table) as <DataItem, >(props: TableProps<DataItem>) => React.ReactElement;\r\n","import React, {FunctionComponent} from 'react'\r\nimport {Link} from 'react-router-dom';\r\nimport {CountryRecord, LanguageRecord} from '../interfaces/countries'\r\nimport styled from 'styled-components'\r\nimport Table from './Table'\r\n\r\ninterface CountryCardProps {\r\n    country: CountryRecord\r\n}\r\n\r\nconst Card = styled(Link)`\r\n    background-color: rgb(15, 32, 45);\r\n    padding: 16px;\r\n    color: inherit;\r\n    text-decoration: none;\r\n\r\n    &:hover {\r\n        background-color: rgb(20, 37, 50);\r\n    }\r\n`;\r\n\r\nconst Fields = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100%;\r\n`\r\n\r\nconst Header = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n`\r\n\r\nconst Title = styled.h2`\r\n    font-weight: normal;\r\n    margin: 0px 8px 16px 8px;\r\n`\r\n\r\nconst Continent = styled.span`\r\n    white-space: nowrap;\r\n    font-size: 18px;\r\n`\r\n\r\nconst columns: Array<{ title: string, key: keyof LanguageRecord }> = [\r\n    { key: 'code', title: 'Code'},\r\n    { key: 'name', title: 'Name'},\r\n    { key: 'native', title: 'Native'}\r\n]\r\n\r\nexport const CountryCard: FunctionComponent<CountryCardProps> = (props) => {\r\n    return <Card to={`/countries/${props.country.code}`}>\r\n        <Fields>\r\n            <Header>\r\n                <Title>{props.country.name} / {props.country.native}</Title>\r\n                <Continent>{props.country.continent.name}</Continent>\r\n            </Header>\r\n            <Table\r\n                columns={columns}\r\n                items={props.country.languages}\r\n                placeholder=\"No languages\"\r\n            />\r\n        </Fields>\r\n    </Card>\r\n}\r\n\r\nexport default React.memo(CountryCard);\r\n","import React, {FunctionComponent} from 'react';\r\nimport {RouteComponentProps} from 'react-router';\r\nimport {useQuery} from '@apollo/react-hooks'\r\nimport {fetchCountries} from '../api/countries'\r\nimport {CountriesResponse} from '../interfaces/countries'\r\nimport CountryCard from './CountryCard';\r\nimport styled from 'styled-components'\r\n\r\ninterface CountriesListProps extends Partial<RouteComponentProps> {\r\n\r\n}\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    height: 100%;\r\n    align-items: center;\r\n`\r\n\r\nconst List = styled.ul`\r\n    display: grid;\r\n    grid-template-columns: repeat(3, 1fr);\r\n    grid-gap: 8px;\r\n    padding: 0px 8px 0px 8px;\r\n\r\n    @media (max-width: 768px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`\r\n\r\nconst PaginationContainer = styled.div`\r\n    \r\nwidth: 100%;\r\n    align-self: flex-start;\r\n    display: flex;\r\n    flex-direction: column;\r\n`\r\n\r\nconst PaginationControls = styled.div`\r\n    margin-top: 16px;\r\n    margin-right: 8px;\r\n    align-self: flex-end;\r\n`\r\n\r\nconst Button = styled.button`\r\n    border: none;\r\n    background-color: ${props => !props.disabled ? 'rgb(15, 32, 45)' : 'rgb(30,40,50)'};\r\n    color: rgba(255, 255, 255, 0.4);\r\n    &:hover {\r\n        background-color: ${props => !props.disabled ? 'rgb(20, 37, 50)' : 'rgb(30,40,50)'};\r\n    }\r\n    outline: none;\r\n    height: 40px;\r\n    margin-left: 8px;\r\n    padding-left: 16px;\r\n    padding-right: 16px;\r\n    cursor: ${props => !props.disabled ? 'pointer' : 'default'};\r\n`\r\n\r\nconst Spinner = styled.span`\r\n    font-size: 22px;\r\n`\r\n\r\nconst pageSize = 30\r\n\r\nexport const CountriesList: FunctionComponent<CountriesListProps> = (props) => {\r\n    const {loading, error, data} = useQuery<CountriesResponse>(fetchCountries)\r\n    const [ page, setPage ] = React.useState(0)\r\n    const countries = data && data.countries\r\n    const handlePrevPage = React.useCallback(() => { setPage(page - 1)}, [page])\r\n    const handleNextPage = React.useCallback(() => { setPage(page + 1)}, [page])\r\n    const countriesPage = React.useMemo(() => {\r\n        return countries\r\n            ? countries.slice(page * pageSize, (page + 1) * pageSize)\r\n            : []\r\n    }, [countries, page])\r\n\r\n    return <Container>\r\n        { loading &&\r\n            <Spinner>Fetching countries...</Spinner>\r\n        }\r\n        { error &&\r\n            <span>{error}</span>\r\n        }\r\n        { !loading && !error && countries &&\r\n            <PaginationContainer>\r\n                <PaginationControls>\r\n                    <Button\r\n                        disabled={page === 0}\r\n                        onClick={handlePrevPage}\r\n                    >\r\n                        Previous page\r\n                    </Button>\r\n                    <Button\r\n                        disabled={(page + 1) * pageSize >= countries.length}\r\n                        onClick={handleNextPage}\r\n                    >\r\n                        Next page\r\n                    </Button>\r\n                </PaginationControls>\r\n                <List>\r\n                    {countriesPage.map(item => <CountryCard key={item.code} country={item} />)}\r\n                </List>\r\n            </PaginationContainer>\r\n        }\r\n    </Container>\r\n}\r\n\r\nexport default React.memo(CountriesList);\r\n","import React, {FunctionComponent} from 'react';\r\nimport {RouteComponentProps} from 'react-router';\r\nimport {CountryResponse, CountryRecord} from '../interfaces/countries'\r\nimport {fetchCountry} from '../api/countries'\r\nimport {useQuery} from '@apollo/react-hooks'\r\nimport styled from 'styled-components'\r\nimport Table from './Table'\r\n\r\ninterface CountryInfoProps extends Partial<RouteComponentProps<{ code: string }>> {\r\n\r\n}\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    height: 100%;\r\n    align-items: center;\r\n`\r\n\r\nconst Fields = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    background-color: rgb(15, 32, 45);\r\n    padding: 16px;\r\n    margin-top: 16px;\r\n    min-width: 500px;\r\n    align-self: flex-start;\r\n\r\n    @media (max-width: 768px) {\r\n        min-width: auto;\r\n        width: 100%;\r\n        margin: 8px;\r\n    }\r\n`\r\n\r\nconst Field = styled.span`\r\n    display: flex;\r\n    justify-content: space-between;\r\n`\r\n\r\nconst HR = styled.hr`\r\n    width: 100%;\r\n    background-color: rgb(60, 70, 80);\r\n    border: none;\r\n    height: 1px;\r\n`\r\n\r\nconst Spinner = styled.span`\r\n    font-size: 22px;\r\n`\r\n\r\nexport const CountryInfo: FunctionComponent<CountryInfoProps> = (props) => {\r\n    const countryCode = props.match && props.match.params.code\r\n    const {loading, error, data} = useQuery<CountryResponse>(fetchCountry, { variables: { countryCode }})\r\n    return <Container>\r\n        { loading &&\r\n            <Spinner>Fetching {countryCode}...</Spinner>\r\n        }\r\n        { error &&\r\n            <span>{error}</span>\r\n        }\r\n        { !loading && !error && data &&\r\n            <Fields>\r\n                <Field>\r\n                    <span>Name:</span>\r\n                    <span>{data.country.name}</span>\r\n                </Field>\r\n                <HR />\r\n                <Field>\r\n                    <span>Currency:</span>\r\n                    <span>{data.country.currency}</span>\r\n                </Field>\r\n                <HR />\r\n                <Field>\r\n                    <span>Area code (phone):</span>\r\n                    <span>{data.country.phone}</span>\r\n                </Field>\r\n                <HR />\r\n            </Fields>\r\n        }\r\n    </Container>\r\n}\r\n\r\nexport default React.memo(CountryInfo);\r\n","import React from 'react';\nimport {BrowserRouter, Route} from 'react-router-dom';\nimport {ApolloProvider} from '@apollo/react-hooks';\nimport apolloClient from './api/apolloClient';\nimport AppBar from './components/AppBar';\nimport HomePage from './components/HomePage';\nimport CountriesList from './components/CountriesList';\nimport CountryInfo from './components/CountryInfo';\nimport styled from 'styled-components'\n\nconst AppLayout = styled.div`\n    display: grid;\n    height: 100%;\n    grid-template-rows: 50px 1fr;\n`\n\nconst AppContent = styled.div`\n    overflow: auto;\n`\n\nfunction App() {\n    return <ApolloProvider client={apolloClient}>\n        <BrowserRouter>\n            <AppLayout>\n                <AppBar />\n                <AppContent>\n                    <Route path=\"/\" exact component={HomePage} />\n                    <Route path=\"/countries/\" exact component={CountriesList} />\n                    <Route path=\"/countries/:code\" component={CountryInfo} />\n                </AppContent>\n            </AppLayout>\n        </BrowserRouter>\n    </ApolloProvider>\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}